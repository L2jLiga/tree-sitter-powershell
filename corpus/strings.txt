===
Strings : expandable
===

"foo"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal)))))))))))))

===
Strings : empty expandable
===

""

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal)))))))))))))

===
Strings : expandle with braced variable
===

"foo ${toto}"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal
                          (variable
                            (braced_variable)))))))))))))))

===
Strings : expandle with subexpression
===

"foo $(iex)"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal
                          (sub_expression
                            (pipeline
                              (command
                                (command_name)))))))))))))))))

===
Strings : verbatim
===

'foo'

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (verbatim_string_characters)))))))))))))

===
Strings : verbatim empty
===

''

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (verbatim_string_characters)))))))))))))

===
Strings : verbatim here string
===

@'
toto
'@

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (verbatim_here_string_characters)))))))))))))

===
Strings : verbatim here string empty
===

@'

'@

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (verbatim_here_string_characters)))))))))))))

===
Strings : expandle here string
===

@"
`$toto
"@

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_here_string_literal)))))))))))))

===
Strings : expandle here string with var
===

@"
$toto
"@

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_here_string_literal
                          (variable))))))))))))))

===
Strings : expandle here string empty
===

@"

"@

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_here_string_literal)))))))))))))


===
Strings : escape variable and print dollar
===

"`$w$ is valid"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal)))))))))))))


===
Strings : concat var content and dollar
===

"$w$ is valid"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal
                          (variable))))))))))))))

===
Strings : Single-quoted string
===

'Hello, &!@#(&)!I_@U!JJ!EN@!'

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (verbatim_string_characters)))))))))))))

===
Strings : Double-quoted string
===

"Hello friend! !@!_(@FK@L!:D<!LQ!W(EK!_#(KQ!(%*(@!)"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal)))))))))))))

===
Strings : Variable substituted string
===

"Hi $person"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal
                          (variable))))))))))))))

===
Strings : Brace-variable substituted string
===

"He was ${adjective}able"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal
                          (variable
                            (braced_variable)))))))))))))))

===
Strings : Escaped variable in double quoted string
===

"In the `$money"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal)))))))))))))

===
Strings : Escaped brace variable in double quoted string
===

"In the `${money}"

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (string_literal
                        (expandable_string_literal)))))))))))))