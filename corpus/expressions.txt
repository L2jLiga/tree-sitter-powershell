===
Integer
===

239

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (integer_literal
                        (decimal_integer_literal)))))))))))))

===
Float
===

12.9191008

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (real_literal))))))))))))

===
Scientific notation
===

6.022e23

.12e4

---

(program
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (real_literal)))))))))))
  (pipeline
    (logical_expression
      (bitwise_expression
        (comparison_expression
          (additive_expression
            (multiplicative_expression
              (format_expression
                (range_expression
                  (array_literal_expression
                    (unary_expression
                      (real_literal))))))))))))

===
Unsigned
===

12u

42U

---

(program
  (pipeline_statement
    (number_expr))
  (pipeline_statement
    (number_expr)))

===
Byte size suffix
===

12mb

12GB

---

(program
  (pipeline_statement
    (number_expr))
  (pipeline_statement
    (number_expr)))

===
Combined number format
===

.2e3ulMB

---

(program
  (pipeline_statement
    (number_expr)))

===
Simple variable
===

$aSimpleVariable001

$91

$__Z

$env:PROGRAM_LOCATION

---

(program
  (pipeline_statement
    (variable_expression))
  (pipeline_statement
    (variable_expression))
  (pipeline_statement
    (variable_expression))
  (pipeline_statement
    (variable_expression)))

===
Special variables
===

$$

$^

$?

---

(program
  (pipeline_statement
    (variable_expression
      (special_variable)))
  (pipeline_statement
    (variable_expression
      (special_variable)))
  (pipeline_statement
    (variable_expression
      (special_variable))))

===
Brace variable
===

${Simple}

${More-interestin'}

${
    Really &&
    quite ^
    unusual???
}

---

(program
  (pipeline_statement
    (variable_expression
      (braced_variable)))
  (pipeline_statement
    (variable_expression
      (braced_variable)))
  (pipeline_statement
    (variable_expression
      (braced_variable))))


===
Splat variable can't be by itself
===

@badByItself

---

(program
  (pipeline_statement
    (variable_expression)))

===
Single-quoted string
===

'Hello, &!@#(&)!I_@U!JJ!EN@!'

---

(program
  (pipeline_statement
    (string_expr)))

===
Double-quoted string
===

"Hello friend! !@!_(@FK@L!:D<!LQ!W(EK!_#(KQ!(%*(@!)"

---

(program
  (pipeline_statement
    (string_expr)))

===
Variable substituted string
===

"Hi $person"

---

(program
  (pipeline_statement
    (string_expr
      (variable_expression))))

===
Brace-variable substituted string
===

"He was ${adjective}able"

---

(program
  (pipeline_statement
    (string_expr
      (variable_expression
        (braced_variable)))))

===
Escaped variable in double quoted string
===

"In the `$money"

---

(program
  (pipeline_statement
    (string_expr)))

===
Escaped brace variable in double quoted string
===

"In the `${money}"

---

(program
  (pipeline_statement
    (string_expr)))

===
Basic hashtable
===

@{
    Hi = "There"
}

---

(program
  (pipeline_statement
    (hashtable_expression
      (hashtable_entry
        (property_name
          (bareword_string))
        (string_expr)))))

===
Multi-key hashtable
===

@{
    Key1 = "Hi"; Key2 = "There"

    "Key3" = 'Friend'


    'Key4' = 'Thing'; $key5 = $result
}

---

(program
  (pipeline_statement
    (hashtable_expression
      (hashtable_entry
        (property_name
          (bareword_string))
        (string_expr))
      (hashtable_entry
        (property_name
          (bareword_string))
        (string_expr))
      (hashtable_entry
        (property_name
          (string_expr))
        (string_expr))
      (hashtable_entry
        (property_name
          (string_expr))
        (string_expr))
      (hashtable_entry
        (property_name
          (variable_expression))
        (variable_expression)))))

===
Simple type expression #1
===

[string]

---

(program
  (pipeline_statement
    (type_expression
      (typename
        (bareword_string)))))

===
Simple type expression #2
===

[System.Collections.ArrayList]

---

(program
  (pipeline_statement
    (type_expression
      (typename
        (bareword_string)
        (bareword_string)
        (bareword_string)))))

===
Array type expression #1
===

[int[]]

---

(program
  (pipeline_statement
    (type_expression
      (typename
        (bareword_string)))))

===
Array type expression #1
===

[System.DateTime[]]

---

(program
  (pipeline_statement
    (type_expression
      (typename
        (bareword_string)
        (bareword_string)))))

===
Generic type expression #1
===

[MyType[psobject]]

---

(program
  (pipeline_statement
    (type_expression
      (typename
        (bareword_string)
        (typename
          (bareword_string))))))

===
Generic type expression #2
===

[System.Collections.Generic.Dictionary[string, System.IO.FileInfo]]

---

(program
  (pipeline_statement
    (type_expression
      (typename
        (bareword_string)
        (bareword_string)
        (bareword_string)
        (bareword_string)
        (typename
          (bareword_string))
        (typename
          (bareword_string)
          (bareword_string)
          (bareword_string))))))

===
Complex type expression
===

[System.Collections.Generic.Dictionary[int[], System.Collections.Generic.List[string[]]]]

---

(program
  (pipeline_statement
    (type_expression
      (typename
        (bareword_string)
        (bareword_string)
        (bareword_string)
        (bareword_string)
        (typename
          (bareword_string))
        (typename
          (bareword_string)
          (bareword_string)
          (bareword_string)
          (bareword_string)
          (typename 
            (bareword_string)))))))

===
Type-attributed variable
===

[string]$str

---

(program
  (pipeline_statement
    (cast_expression
      (type_expression
        (typename
          (bareword_string)))
      (variable_expression))))


===
Sub-expression
===

$(Get-ChildItem)

---

(program
  (pipeline_statement
    (subexpression
      (pipeline_statement
        (cmdlet_statement
          (bareword_string))))))

===
Sub-expression with pipeline
===

$(Get-ChildItem . | Measure-Object)

---

(program
  (pipeline_statement
    (subexpression
      (pipeline_statement
        (cmdlet_statement
          (bareword_string)
          (cmdlet_token
            (path_string)))
        (cmdlet_statement
          (bareword_string))))))


===
Access object attribute from var
===

$test.count

---

(program
  (pipeline_statement
    (properties_expression
      (variable_expression)
      (bareword_string))))


===
Access object attribute from subexpression
===

$(Get-ChildItem . | Measure-Object).count

---

(program
  (pipeline_statement
    (properties_expression
      (subexpression
        (pipeline_statement
          (cmdlet_statement
            (bareword_string)
            (cmdlet_token
              (path_string)))
          (cmdlet_statement
            (bareword_string))))
      (bareword_string))))


===
Access object attribute from subexpression
===

Get-ChildItem (Join-Path $PSScriptRoot *.ps1) | ForEach-Object { . $_.FullName}

---

(program
  (pipeline_statement
    (cmdlet_statement
      (bareword_string)
      (cmdlet_token
        (subpipeline
          (pipeline_statement
            (cmdlet_statement
              (bareword_string)
              (cmdlet_token
                (variable_expression))
              (cmdlet_token
                (path_string)))))))
    (cmdlet_statement
      (bareword_string)
      (cmdlet_token
        (scriptblock_expression
          (pipeline_statement
            (cmdlet_statement
              (eval_expression
                (variable_expression
                  (special_variable)))
              (cmdlet_token
                (path_string)))))))))


===
Format expression
===

"{0}" -f "test"

---

(program
  (pipeline_statement
    (format_expression
      (string_expr)
      (tuple_expression
        (string_expr)))))



===
Call object expression with multi type as parameters
===

[Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type]))

---

(program
  (pipeline_statement
    (call_expr
      (properties_expression
        (type_expression
          (typename
            (bareword_string)
            (bareword_string)
            (bareword_string)))
        (bareword_string))
      (tuple_expression
        (string_expr)
        (cast_expression
          (type_expression
            (typename
              (bareword_string)))
          (flat_array_expression
            (tuple_expression
              (type_expression
                (typename
                  (bareword_string))))))))))


===
Cast with composed expression
===

[char]84 + [char]8

---

(program
  (pipeline_statement
    (composed_expression
      (cast_expression
        (type_expression
          (typename
            (bareword_string)))
        (number_expr))
      (operator)
      (cast_expression
        (type_expression
          (typename
            (bareword_string)))
        (number_expr)))))

===
Priority with composed expression
===

$FP8DpgPcK0IovuDHPZ4p2 = $FP8DpgPcK0IovuDHPZ4p + "P"  + "S"  + " "  + (Get-Location).Path

---

(program
  (pipeline_statement
    (assignment_statement
      (variable_expression)
      (pipeline_statement
        (composed_expression
          (composed_expression
            (composed_expression
              (composed_expression
                (variable_expression)
                (operator)
                (string_expr))
              (operator)
              (string_expr))
            (operator)
            (string_expr))
          (operator)
          (properties_expression
            (subpipeline
              (pipeline_statement
                (cmdlet_statement
                  (bareword_string))))
            (bareword_string)))))))

===
Priority with indexed expression add post increment affected var
===

$upgrade += [char]($title[3] -bxor $update[$i])

---

(program
  (pipeline_statement
    (assignment_statement
      (variable_expression)
      (pipeline_statement
        (cast_expression
          (type_expression
            (typename
              (bareword_string)))
          (subpipeline
            (pipeline_statement
              (composed_expression
                (index_expr
                  (variable_expression)
                  (number_expr))
                (operator)
                (index_expr
                  (variable_expression)
                  (variable_expression))))))))))


===
Reverse array
===

$foo[-1..-$foo.Length]

---

(program
  (pipeline_statement
    (index_expr
      (variable_expression)
      (composed_expression
        (unary_expression
          (number_expr))
        (operator)
        (unary_expression
          (properties_expression
            (variable_expression)
            (bareword_string)))))))